name: Cargo Build

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        include:
          - os: ubuntu-latest
            file-name: advent_of_code
            prefix: linux
            upload-prefix: linux_x86_64

          - os: macOS-latest
            file-name: advent_of_code
            prefix: macos
            upload-prefix: macos_x86_64

          - os: windows-latest
            file-name: advent_of_code.exe
            prefix: windows
            upload-prefix: win_x86_64

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly

      - name: Restore Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Get Tag
        if: ${{ matrix.os != 'windows-latest' }}
        id: get_tag
        run: |
          echo ${GITHUB_REF#refs/tags/}
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Get Tag (Win)
        if: ${{ matrix.os == 'windows-latest' }}
        id: get_tag_win
        run: |
          echo "${env:GITHUB_REF}"

          $tag = ${env:GITHUB_REF} -replace "refs/tags/" -replace ""
          echo "TAG=$tag" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

          echo "Tag: $tag"

      - name: Cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.prefix }}-${{ matrix.file-name }}
          path: ./target/release/${{ matrix.file-name }}
          if-no-files-found: error

      - name: Get Release
        uses: octokit/request-action@v2.x
        id: get_release
        with:
          route: GET /repos/:repository/releases/tags/${{ env.TAG }}
          repository: ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Release Upload URL
        if: ${{ matrix.os != 'windows-latest' }}
        id: get_upload_url
        run: |
          url=$(echo "$response" | jq -r '.upload_url')
          echo $url
          echo "upload_url=$url" >> $GITHUB_ENV
        env:
          response:  ${{ steps.get_release.outputs.data }}

      - name: Get Release Upload URL (Win)
        if: ${{ matrix.os == 'windows-latest' }}
        id: get_upload_url_win
        run: |
          $url = ${env:response} | jq -r '.upload_url'
          echo ${env:response}
          echo $url
          echo "upload_url=$url" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        env:
          response: ${{ steps.get_release.outputs.data }}

      - name: Upload Release Asset
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.upload_url }}
          asset_path: ./target/release/${{ matrix.file-name }}
          asset_name: ${{ matrix.upload-prefix }}-${{ matrix.file-name }}
          asset_content_type: application/octet-stream